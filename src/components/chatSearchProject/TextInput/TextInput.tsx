import SendIcon from "@mui/icons-material/Send";
import {
  Box,
  Button,
  CircularProgress,
  InputAdornment,
  Stack
} from "@mui/material";
import { blue } from "@mui/material/colors";
import TextField from "@mui/material/TextField";
import { useState } from "react";
import "./TextInput.css";
// customized Props to transfer the input Message from this component to parent layout
interface TextInputProps {
  loading: boolean; //get the loading state from the chat layout
  onQuery: (input: string) => void;
}

const TextInput = ({ onQuery, loading }: TextInputProps) => {
  const [message, setMessage] = useState("");
  const [inputError,setInputError] = useState(false);

  const handleSubmit = () => {
    if (message === "") {
      return; // no message input, do nothing
    }
    if (message.length >1000){
      setInputError(true);
      quitError();
      return;
    }
    //transfer the input message to parent component, which is the chat window layout
    setMessage(message);
    onQuery(message);
    setMessage("");
  };

  const quitError = () => {
    setTimeout(() => {setInputError(false);},5000);
  }

  const handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {
    if (event.key === 'Enter') {
      if(event.shiftKey || event.ctrlKey) return;
      event.preventDefault();
      handleSubmit();
    }
  };

  const loadingShader = (
    <CircularProgress
      size={30}
      sx={{
        color: blue[500],
        position: "absolute",
        top: "50%",
        left: "50%",
        marginTop: "-12px",
        marginLeft: "-12px",
      }}
    />
  );

  return (
    <div className="input-container">
      <Stack direction={"row"} alignItems={"center"} spacing={1}>
        <TextField
          error={inputError}
          fullWidth
          variant="outlined"
          value={message}
          label="Search Query"
          multiline
          onKeyDown={handleKeyPress}
          helperText={inputError?"Query too long":null}
          placeholder="What research articles do you need?"
          minRows={1}
          maxRows={8}
          sx={{
            /* this style method to customise the root is generated by Claude3.5 */
            "& .MuiOutlinedInput-root": {
              "& fieldset": {
                borderRadius: "20px",
                borderWidth: "2px",
              },
              "&:hover fieldset": {
                borderWidth: "3px", // borders when hovering
                borderColor: "#757ce8",
              },
              "&.Mui-focused fieldset": {
                borderWidth: "2px", // borders when focusing
              },
            },
          }}
          slotProps={{
            /* mui text field api, to set the button inside */
            input: {
              endAdornment: (
                <InputAdornment position="end">
                  <Box>
                    <Button
                      disabled={loading}
                      variant="contained"
                      endIcon={<SendIcon />}
                      onClick={() => {
                        handleSubmit();
                      }}
                    >
                      {loading && loadingShader}
                      SEND
                    </Button>
                  </Box>
                </InputAdornment>
              ),
            },
          }}
          //handle the input here
          onChange={(e) => setMessage(e.target.value)}
        />
      </Stack>
    </div>
  );
};

export default TextInput;
