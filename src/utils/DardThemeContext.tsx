import { createTheme, ThemeProvider } from "@mui/material/styles";
import React, {
  createContext,
  ReactNode,
  useContext,
  useEffect,
  useMemo,
  useState,
} from "react";

interface ThemeContextProps {
  getInitialThemeMode: () => void;
  isDarkMode: boolean;
  toggleTheme: () => void;
}

const ThemeContext = createContext<ThemeContextProps | undefined>(undefined);

interface ThemeProviderWrapperProps {
  children: ReactNode;
}

//this method is generated by chatgpt. But the initial theme mode method and the frame is built by my own
export const ThemeProviderWrapper: React.FC<ThemeProviderWrapperProps> = ({
  children,
}) => {
  const [isDarkMode, setIsDarkMode] = useState(Boolean);

  const toggleTheme = () => {
    setIsDarkMode((prevMode) => !prevMode);
  };

  //get the system initial or pre saved theme, if it is dark, return"true", and set to the certain mode
  const getInitialThemeMode = () => {
    const savedMode = localStorage.getItem("darkMode");
    if (savedMode !== null) {
      setIsDarkMode(JSON.parse(savedMode) as boolean);
      return
    }

    //this "window.matchMedia" to get the system default theme mode
    const systemPrefersDark = window.matchMedia(
      "(prefers-color-scheme: dark)"
    ).matches;
    setIsDarkMode(systemPrefersDark);
    return
  };

  //when the dark mode is changed, set the state to localStorage
  useEffect(() => {
    localStorage.setItem("darkMode", JSON.stringify(isDarkMode));
  }, [isDarkMode]);

  //use Memo, when the state of darkMode changes, the instance will be created
  const theme = useMemo(
    () =>
      createTheme({
        colorSchemes: {
          dark: isDarkMode,
        },
      }),
    [isDarkMode]
  );

  return (
    <ThemeContext.Provider
      value={{ isDarkMode, toggleTheme, getInitialThemeMode }}
    >
      <ThemeProvider theme={theme}>{children}</ThemeProvider>
    </ThemeContext.Provider>
  );
};

export const useThemeContext = (): ThemeContextProps => {
  const context = useContext(ThemeContext);
  if (!context) {
    throw new Error(
      "useThemeContext must be used within a ThemeProviderWrapper"
    );
  }
  return context;
};
